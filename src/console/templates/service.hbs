import * as Bookshelf from 'bookshelf';
import { inject, named } from 'inversify';
import { Core } from '../../{{deepness}}core/Targets';
import { Repository } from '../../{{deepness}}constants/Targets';
import { Types } from '../../{{deepness}}constants/Types';
import { Log } from '../../{{deepness}}core/log';
import { NotFoundException } from '../{{deepness}}exceptions/NotFoundException';
import { {{name.capitalize}}Repository } from '../{{deepness}}repositories/{{name.capitalize}}Repository';
import { {{name.capitalize}} } from '../{{deepness}}models/{{name.capitalize}}';


export class {{name.capitalize}}Service {

    public log: Log;

    constructor(
        @inject(Types.Repository) @named(Repository.{{name.capitalize}}Repository) public {{name.camelCase}}Repo: {{name.capitalize}}Repository,
        @inject(Types.Core) @named(Core.Log) public Logger: typeof Log
    ) {
        this.log = new Logger('api:services:{{name.capitalize}}Service');
    }

    public async findAll(): Promise<Bookshelf.Collection<{{name.capitalize}}>> {
        return this.{{name.camelCase}}Repo.findAll();
    }

    public async findOne(id: number): Promise<{{name.capitalize}}> {
        const {{name.camelCase}} = await this.{{name.camelCase}}Repo.findOne(id);
        if ({{name.camelCase}} === null) {
            this.log.warn(`{{name.capitalize}} with the id=${id} was not found!`);
            throw new NotFoundException(id);
        }
        return {{name.camelCase}};
    }

    public async create(data: any): Promise<{{name.capitalize}}> {
        // If the request body was valid we will create the {{name.camelCase}}
        const {{name.camelCase}} = await this.{{name.camelCase}}Repo.create(data);
        return {{name.camelCase}};
    }

    public async update(id: number, new{{name.capitalize}}: any): Promise<{{name.capitalize}}> {
        // Find or fail
        const {{name.camelCase}} = await this.findOne(id);

        // Set new values
        // TODO asign correct values
        // {{name.camelCase}}.Value = new{{name.capitalize}}.value;

        // Update {{name.camelCase}} record
        const updated{{name.capitalize}} = await this.{{name.camelCase}}Repo.update(id, {{name.camelCase}}.toJSON());
        return updated{{name.capitalize}};
    }

    public async destroy(id: number): Promise<void> {
        await this.{{name.camelCase}}Repo.destroy(id);
    }

}
