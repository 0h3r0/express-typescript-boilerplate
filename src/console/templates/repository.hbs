import * as Bookshelf from 'bookshelf';
import { inject, named } from 'inversify';
import { Types } from '../../{{deepness}}constants/Types';
import { Model } from '../../{{deepness}}constants/Targets';
import { {{name.capitalize}} } from '../{{deepness}}models/{{name.capitalize}}';
import { DatabaseException } from '../{{deepness}}exceptions/DatabaseException';
import { NotFoundException } from '../{{deepness}}exceptions/NotFoundException';


export class {{name.capitalize}}Repository {

    constructor(
        @inject(Types.Model) @named(Model.{{name.capitalize}}) public {{name.capitalize}}Model: typeof {{name.capitalize}}
    ) { }

    public async findAll(): Promise<Bookshelf.Collection<{{name.capitalize}}>> {
        const list = await this.{{name.capitalize}}Model.fetchAll();
        return <Bookshelf.Collection<{{name.capitalize}}>>list;
    }

    public async findOne(id: number): Promise<{{name.capitalize}}> {
        return this.{{name.capitalize}}Model.fetchById(id);
    }

    public async create(data: any): Promise<{{name.capitalize}}> {
        const {{name.camelCase}} = this.{{name.capitalize}}Model.forge<{{name.capitalize}}>(data);
        try {
            const {{name.camelCase}}Created = await {{name.camelCase}}.save();
            return await this.{{name.capitalize}}Model.fetchById({{name.camelCase}}Created.id);
        } catch (error) {
            throw new DatabaseException('Could not create the {{name.camelCase}}!', error);
        }
    }

    public async update(id: number, data: any): Promise<{{name.capitalize}}> {
        const {{name.camelCase}} = this.{{name.capitalize}}Model.forge<{{name.capitalize}}>({ id: id });
        try {
            const {{name.camelCase}}Updated = await {{name.camelCase}}.save(data, { patch: true });
            return await this.{{name.capitalize}}Model.fetchById({{name.camelCase}}Updated.id);

        } catch (error) {
            throw new DatabaseException('Could not update the {{name.camelCase}}!', error);
        }
    }

    public async destroy(id: number): Promise<void> {
        let {{name.camelCase}} = this.{{name.capitalize}}Model.forge<{{name.capitalize}}>({ id: id });
        try {
            {{name.camelCase}} = await {{name.camelCase}}.fetch({ require: true });
        } catch (error) {
            throw new NotFoundException(id);
        }

        try {
            await {{name.camelCase}}.destroy();
            return;
        } catch (error) {
            throw new DatabaseException('Could not delete the {{name.camelCase}}!', error);
        }
    }

}
